{"ast":null,"code":"import { messageActions } from './index';\nimport { mainApi } from \"../../constants/api\";\nconst sendMessage = message => async (dispatch, getState) => {\n  const rootState = getState();\n  const accountState = rootState.account.accountState;\n  const {\n    idInstance,\n    apiTokenInstance,\n    chatId\n  } = accountState;\n  dispatch(messageActions.requestSendMessageActionCreator());\n  try {\n    await fetch(`${mainApi(idInstance, apiTokenInstance, 'sendMessage')}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        chatId,\n        message\n      })\n    });\n    dispatch(messageActions.successSendMessageActionCreator({\n      type: 'Outgoing',\n      text: message,\n      timestamp: new Date().getTime()\n    }));\n  } catch (err) {\n    dispatch(messageActions.failureSendMessageActionCreator(err));\n  }\n};\nconst updateIncomingMessages = () => async (dispatch, getState) => {\n  const rootState = getState();\n  const accountState = rootState.account.accountState;\n  const {\n    idInstance,\n    apiTokenInstance\n  } = accountState;\n  dispatch(messageActions.requestGetNotificationsActionCreator());\n  try {\n    const res = await fetch(`${mainApi(idInstance, apiTokenInstance, 'receiveNotification')}`);\n    const parsedData = await res.json();\n    if (!parsedData) {\n      dispatch(messageActions.emptyGetNotificationsActionCreator());\n      return;\n    }\n    if (parsedData && parsedData.body && parsedData.body.typeWebhook === 'incomingMessageReceived') {\n      dispatch(messageActions.successGetNotificationsActionCreator({\n        type: 'Incoming',\n        text: parsedData.body.messageData.textMessageData.textMessage,\n        timestamp: parsedData.body.timestamp\n      }));\n      dispatch(messageActions.requestDeleteNotificationActionCreator());\n      try {\n        await fetch(`${mainApi(idInstance, apiTokenInstance, 'deleteNotification')}/${parsedData.receiptId}`, {\n          method: 'DELETE'\n        });\n        dispatch(messageActions.successDeleteNotificationActionCreator());\n      } catch (err) {\n        dispatch(messageActions.failureSendMessageActionCreator(err));\n      }\n    }\n  } catch (err) {\n    dispatch(messageActions.failureSendMessageActionCreator(err));\n  }\n};\nconst clearMessages = () => dispatch => {\n  dispatch(messageActions.clearMessagesActionCreator());\n};\nexport default {\n  sendMessage,\n  updateIncomingMessages,\n  clearMessages\n};","map":{"version":3,"names":["messageActions","mainApi","sendMessage","message","dispatch","getState","rootState","accountState","account","idInstance","apiTokenInstance","chatId","requestSendMessageActionCreator","fetch","method","body","JSON","stringify","successSendMessageActionCreator","type","text","timestamp","Date","getTime","err","failureSendMessageActionCreator","updateIncomingMessages","requestGetNotificationsActionCreator","res","parsedData","json","emptyGetNotificationsActionCreator","typeWebhook","successGetNotificationsActionCreator","messageData","textMessageData","textMessage","requestDeleteNotificationActionCreator","receiptId","successDeleteNotificationActionCreator","clearMessages","clearMessagesActionCreator"],"sources":["C:/Users/Oscarquell/Desktop/greenAPI/src/redux/Messages/thunks.js"],"sourcesContent":["import {messageActions} from './index'\nimport {mainApi} from \"../../constants/api\";\n\nconst sendMessage = (message) => async (dispatch, getState) => {\n  const rootState = getState()\n  const accountState = rootState.account.accountState\n  const {idInstance, apiTokenInstance, chatId} = accountState\n\n  dispatch(messageActions.requestSendMessageActionCreator())\n  try {\n    await fetch(`${mainApi(idInstance, apiTokenInstance, 'sendMessage')}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        chatId,\n        message\n      })\n    })\n    dispatch(messageActions.successSendMessageActionCreator({\n      type: 'Outgoing',\n      text: message,\n      timestamp: new Date().getTime()\n    }))\n  } catch (err) {\n    dispatch(messageActions.failureSendMessageActionCreator(err))\n  }\n}\n\nconst updateIncomingMessages = () => async (dispatch, getState) => {\n  const rootState = getState()\n  const accountState = rootState.account.accountState\n  const {idInstance, apiTokenInstance} = accountState\n\n  dispatch(messageActions.requestGetNotificationsActionCreator())\n  try {\n    const res = await fetch(`${mainApi(idInstance, apiTokenInstance, 'receiveNotification')}`)\n    const parsedData = await res.json()\n    if (!parsedData) {\n      dispatch(messageActions.emptyGetNotificationsActionCreator())\n      return\n    }\n    if (parsedData && parsedData.body && parsedData.body.typeWebhook === 'incomingMessageReceived') {\n      dispatch(messageActions.successGetNotificationsActionCreator({\n        type: 'Incoming',\n        text: parsedData.body.messageData.textMessageData.textMessage,\n        timestamp: parsedData.body.timestamp\n      }))\n      dispatch(messageActions.requestDeleteNotificationActionCreator())\n      try {\n        await fetch(`${mainApi(idInstance, apiTokenInstance, 'deleteNotification')}/${parsedData.receiptId}`, {\n          method: 'DELETE'\n        })\n        dispatch(messageActions.successDeleteNotificationActionCreator())\n      } catch (err) {\n        dispatch(messageActions.failureSendMessageActionCreator(err))\n      }\n    }\n  } catch (err) {\n    dispatch(messageActions.failureSendMessageActionCreator(err))\n  }\n}\n\nconst clearMessages = () => (dispatch) => {\n  dispatch(messageActions.clearMessagesActionCreator())\n}\n\nexport default {\n  sendMessage,\n  updateIncomingMessages,\n  clearMessages\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}